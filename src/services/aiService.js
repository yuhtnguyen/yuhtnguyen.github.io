import axios from 'axios'

// Portfolio context - th√¥ng tin v·ªÅ Thuy ƒë·ªÉ AI hi·ªÉu v√† tr·∫£ l·ªùi ch√≠nh x√°c
const PORTFOLIO_CONTEXT = `
You are an AI assistant for Nguyen Thi Thuy's portfolio website. You must be friendly, helpful, and professional.

IMPORTANT LANGUAGE RULE:
- If user asks in Vietnamese, you MUST respond in Vietnamese only
- If user asks in English, you MUST respond in English only
- NEVER mix languages in one response
- Detect the user's language from their message and match it exactly

PERSONAL INFO:
- Name: Nguyen Thi Thuy (Th√∫y)
- Role: Full Stack Developer & QA Engineer
- Location: Ho Chi Minh City, Vietnam
- Languages: Vietnamese (native), English (fluent)

TECHNICAL SKILLS:
Programming Languages: JavaScript, TypeScript, Python, Java
Frontend: React, HTML5, CSS3, Next.js, Ant Design, Responsive Design
Backend: Node.js, Express.js, Python, RESTful APIs
Databases: MongoDB, PostgreSQL, MySQL
Testing: Manual Testing, Automated Testing, Selenium, Jest, Cypress, API Testing, QA Processes
Tools: Git, Docker, VS Code, Jira, Postman, Figma, AWS, Vercel, GitHub Actions, Linux

WORK EXPERIENCE:
1. Full Stack Developer at Tech Solutions Inc. (2023 - Present)
   - Ph√°t tri·ªÉn web applications v·ªõi React, Node.js, v√† MongoDB
   - Collaboration v·ªõi cross-functional teams
   - Implement responsive designs v√† optimize performance
   - Mentor junior developers v√† conduct code reviews

2. QA Engineer at Quality Systems Ltd. (2022 - 2023)
   - Manual v√† automated testing cho web v√† mobile applications
   - T·∫°o comprehensive test plans v√† test cases
   - Bug tracking v√† quality assurance processes
   - Collaborate v·ªõi development teams

3. Junior Developer at StartUp Innovations (2021 - 2022)
   - Frontend development v·ªõi React v√† JavaScript
   - Agile development processes v√† daily standups
   - API integration v√† database design

EDUCATION:
- Bachelor of Computer Science t·ª´ University of Technology (2018-2022)
- Graduated with honors, relevant coursework: Data Structures, Algorithms, Database Systems

FEATURED PROJECTS:
1. E-Commerce Platform 
   - Tech: React, Node.js, MongoDB, Stripe API, Express.js
   - Features: User authentication, shopping cart, payment integration, admin dashboard
   - Deployed on Vercel with responsive design

2. Task Management App
   - Tech: React, TypeScript, Socket.io, PostgreSQL, Docker
   - Features: Real-time collaboration, drag-and-drop, team management
   - Advanced state management and performance optimization

3. Weather Dashboard
   - Tech: React, Chart.js, OpenWeather API, CSS3
   - Features: Multi-city weather, data visualization, responsive design
   - Clean code architecture and API integration

4. Portfolio Website (this site)
   - Tech: React, Ant Design, Vite, Vercel, AI ChatBot
   - Features: Responsive design, AI assistant, modern UI/UX

CONTACT INFORMATION:
- Email: your.email@example.com
- Phone: +84 123 456 789
- GitHub: https://github.com/yuhtnguyen
- LinkedIn: https://linkedin.com/in/yuhtnguyen
- Available for: Full-time, freelance, consulting opportunities

PERSONALITY & RESPONSE STYLE:
- Be enthusiastic about Thuy's skills and projects
- Highlight her unique combination of development + QA experience
- Encourage potential employers to reach out
- Be specific about technical details when asked
- Show her passion for quality and user experience
- Mention her continuous learning mindset

RESPONSE GUIDELINES:
- Keep responses concise but informative (2-4 sentences usually)
- Use emojis occasionally to be friendly
- If you don't know specific details, suggest checking the relevant portfolio section
- Always encourage contact for opportunities or collaborations
- Show enthusiasm for her technical abilities and career growth
`

// Gemini AI Configuration (Free API)
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY || 'YOUR_GEMINI_API_KEY'
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'

// OpenAI Configuration (Alternative - c√≥ ph√≠)
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY || 'YOUR_OPENAI_API_KEY'
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions'

export class AIService {
  constructor() {
    this.conversationHistory = []
  }

  // S·ª≠ d·ª•ng Gemini AI (Google - mi·ªÖn ph√≠)
  async getGeminiResponse(userMessage) {
    try {
      if (!GEMINI_API_KEY || GEMINI_API_KEY === 'YOUR_GEMINI_API_KEY') {
        throw new Error('Gemini API key not configured')
      }

      console.log('ü§ñ Calling Gemini AI...', { userMessage })

      // Detect user language
      const isVietnamese = /[\u00C0-\u1EF9]/.test(userMessage) || 
                          /\b(l√†|c√≥|g√¨|sao|nh∆∞|th·∫ø|n√†o|t√¥i|b·∫°n|c√¥|anh|em|c·ªßa|v·ªÅ|v·ªõi|trong|n√†y|ƒë√≥|r·∫•t|nhi·ªÅu|·ªü|t·ª´|v√†|hay|khi|ƒë√£|s·∫Ω|ƒë∆∞·ª£c|kh√¥ng|c√≥ th·ªÉ|l√†m|h·ªèi|bi·∫øt|hi·ªÉu)\b/i.test(userMessage)

      const languageInstruction = isVietnamese 
        ? "CRITICAL: User asked in Vietnamese. You MUST respond in Vietnamese only. Do not use any English words."
        : "CRITICAL: User asked in English. You MUST respond in English only. Do not use any Vietnamese words."

      const response = await axios.post(
        `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,
        {
          contents: [{
            parts: [{
              text: `${PORTFOLIO_CONTEXT}

${languageInstruction}

User message: "${userMessage}"

Your response (remember to match the user's language exactly):`
            }]
          }],
          generationConfig: {
            temperature: 0.7,
            topK: 40,
            topP: 0.95,
            maxOutputTokens: 200,
            stopSequences: []
          }
        },
        {
          headers: {
            'Content-Type': 'application/json',
          },
          timeout: 10000 // 10 seconds timeout
        }
      )

      const aiResponse = response.data.candidates[0].content.parts[0].text
      console.log('‚úÖ Gemini AI Response:', aiResponse)
      return aiResponse

    } catch (error) {
      console.error('‚ùå Gemini AI Error:', error.response?.data || error.message)
      
      if (error.response?.status === 400) {
        throw new Error('Invalid API request. Please check your API key.')
      } else if (error.response?.status === 403) {
        throw new Error('API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt quota.')
      } else if (error.response?.status === 429) {
        throw new Error('Rate limit exceeded. Please try again later.')
      }
      
      throw error
    }
  }

  // S·ª≠ d·ª•ng OpenAI (c√≥ ph√≠ nh∆∞ng ch·∫•t l∆∞·ª£ng cao)
  async getOpenAIResponse(userMessage) {
    try {
      if (!OPENAI_API_KEY || OPENAI_API_KEY === 'YOUR_OPENAI_API_KEY') {
        throw new Error('OpenAI API key not configured')
      }

      const messages = [
        { role: 'system', content: PORTFOLIO_CONTEXT },
        ...this.conversationHistory,
        { role: 'user', content: userMessage }
      ]

      const response = await axios.post(
        OPENAI_API_URL,
        {
          model: 'gpt-3.5-turbo',
          messages: messages,
          max_tokens: 150,
          temperature: 0.7,
        },
        {
          headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          }
        }
      )

      return response.data.choices[0].message.content
    } catch (error) {
      console.error('OpenAI Error:', error)
      throw error
    }
  }

  // Fallback local AI simulation (khi kh√¥ng c√≥ API key)
  getLocalAIResponse(userMessage) {
    const message = userMessage.toLowerCase()
    
    // Ph√¢n t√≠ch intent v√† tr·∫£ l·ªùi th√¥ng minh h∆°n
    if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi')) {
      return this.generateContextualGreeting()
    }
    
    if (message.includes('d·ª± √°n') || message.includes('project')) {
      return this.generateProjectResponse(message)
    }
    
    if (message.includes('k·ªπ nƒÉng') || message.includes('skill') || message.includes('c√¥ng ngh·ªá')) {
      return this.generateSkillResponse(message)
    }
    
    if (message.includes('kinh nghi·ªám') || message.includes('experience') || message.includes('l√†m vi·ªác')) {
      return this.generateExperienceResponse(message)
    }
    
    if (message.includes('li√™n h·ªá') || message.includes('contact') || message.includes('email')) {
      return this.generateContactResponse()
    }

    if (message.includes('h·ªçc v·∫•n') || message.includes('education') || message.includes('ƒë·∫°i h·ªçc')) {
      return this.generateEducationResponse()
    }

    if (message.includes('tuy·ªÉn d·ª•ng') || message.includes('hiring') || message.includes('job')) {
      return this.generateHiringResponse()
    }
    
    return this.generateSmartDefault(message)
  }

  generateContextualGreeting() {
    const greetings = [
      "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa Thuy. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ kinh nghi·ªám l√†m vi·ªác, k·ªπ nƒÉng l·∫≠p tr√¨nh, v√† c√°c d·ª± √°n c·ªßa c√¥ ·∫•y. B·∫°n mu·ªën bi·∫øt g√¨ nh·∫•t?",
      "Hello! I'm Thuy's AI assistant. I can help you learn about her development skills, work experience, and projects. What would you like to know?",
      "Ch√†o b·∫°n! T√¥i ƒë∆∞·ª£c t·∫°o ra ƒë·ªÉ gi√∫p b·∫°n hi·ªÉu r√µ h∆°n v·ªÅ portfolio c·ªßa Thuy - m·ªôt Full Stack Developer v√† QA Engineer t√†i nƒÉng. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨!"
    ]
    return greetings[Math.floor(Math.random() * greetings.length)]
  }

  generateProjectResponse(message) {
    if (message.includes('ecommerce') || message.includes('th∆∞∆°ng m·∫°i')) {
      return "D·ª± √°n E-Commerce Platform c·ªßa Thuy r·∫•t ·∫•n t∆∞·ª£ng! ƒê∆∞·ª£c x√¢y d·ª±ng v·ªõi React, Node.js, MongoDB v√† t√≠ch h·ª£p Stripe API. D·ª± √°n c√≥ ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng: ƒëƒÉng nh·∫≠p, gi·ªè h√†ng, thanh to√°n. B·∫°n c√≥ th·ªÉ xem demo v√† source code tr√™n trang Projects!"
    }
    
    if (message.includes('task') || message.includes('qu·∫£n l√Ω')) {
      return "Task Management App l√† m·ªôt trong nh·ªØng d·ª± √°n n·ªïi b·∫≠t - ·ª©ng d·ª•ng qu·∫£n l√Ω c√¥ng vi·ªác theo nh√≥m v·ªõi real-time updates, drag-and-drop, s·ª≠ d·ª•ng React, TypeScript, Socket.io v√† PostgreSQL. R·∫•t ph√π h·ª£p cho team collaboration!"
    }
    
    return "Thuy ƒë√£ ph√°t tri·ªÉn nhi·ªÅu d·ª± √°n th√∫ v·ªã: E-Commerce Platform (React + Node.js), Task Management App (v·ªõi real-time features), Weather Dashboard, v√† ch√≠nh website portfolio n√†y! M·ªói d·ª± √°n ƒë·ªÅu showcase c√°c k·ªπ nƒÉng kh√°c nhau t·ª´ frontend ƒë·∫øn backend v√† database."
  }

  generateSkillResponse(message) {
    if (message.includes('frontend') || message.includes('giao di·ªán')) {
      return "V·ªÅ frontend, Thuy chuy√™n s√¢u React ecosystem: React, TypeScript, Next.js, HTML5, CSS3, Ant Design. C√¥ ·∫•y r·∫•t gi·ªèi t·∫°o ra nh·ªØng giao di·ªán user-friendly v√† responsive design!"
    }
    
    if (message.includes('backend') || message.includes('server')) {
      return "Backend skills c·ªßa Thuy bao g·ªìm Node.js, Express.js, Python, c√πng v·ªõi database MongoDB, PostgreSQL, MySQL. C√¥ ·∫•y c√≥ kinh nghi·ªám x√¢y d·ª±ng API robust v√† scalable architecture."
    }
    
    if (message.includes('testing') || message.includes('test')) {
      return "Thuy c√≥ expertise m·∫°nh v·ªÅ Testing! T·ª´ Manual Testing ƒë·∫øn Automated Testing v·ªõi Selenium, Jest, Cypress. C√¥ ·∫•y hi·ªÉu r√µ QA processes v√† c√≥ th·ªÉ ensure code quality cao."
    }
    
    return "Thuy l√† m·ªôt Full Stack Developer to√†n di·ªán: Frontend (React, TypeScript), Backend (Node.js, Python), Database (MongoDB, PostgreSQL), Testing (Jest, Cypress, Selenium), v√† DevOps tools (Docker, AWS, Vercel). M·ªôt skillset r·∫•t impressive!"
  }

  generateExperienceResponse(message) {
    if (message.includes('hi·ªán t·∫°i') || message.includes('current')) {
      return "Hi·ªán t·∫°i Thuy ƒëang l√†m Full Stack Developer t·∫°i Tech Solutions Inc. (t·ª´ 2023). C√¥ ·∫•y develop web applications v·ªõi React/Node.js, mentor junior developers, v√† optimize performance. M·ªôt role r·∫•t senior!"
    }
    
    return "Thuy c√≥ career path r·∫•t solid: Junior Developer (2021-2022) ‚Üí QA Engineer (2022-2023) ‚Üí Full Stack Developer (2023-present). S·ª± k·∫øt h·ª£p gi·ªØa development v√† QA experience gi√∫p c√¥ ·∫•y t·∫°o ra nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao!"
  }

  generateContactResponse() {
    return "B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi Thuy qua nhi·ªÅu c√°ch: Email (your.email@example.com), LinkedIn, GitHub, ho·∫∑c s·ª≠ d·ª•ng contact form tr√™n website. C√¥ ·∫•y r·∫•t welcome v·ªõi opportunities m·ªõi v√† tech discussions!"
  }

  generateEducationResponse() {
    return "Thuy t·ªët nghi·ªáp Bachelor of Computer Science t·∫°i University of Technology (2018-2022) v·ªõi honors degree. Strong foundation v·ªÅ Data Structures, Algorithms, Database Systems, v√† Software Engineering!"
  }

  generateHiringResponse() {
    return "Thuy ƒëang open cho c√°c opportunities m·ªõi! C√¥ ·∫•y c√≥ th·ªÉ l√†m full-time, freelance projects, ho·∫∑c consulting. V·ªõi skillset full-stack v√† QA experience, Thuy s·∫Ω l√† asset tuy·ªát v·ªùi cho team b·∫°n. H√£y li√™n h·ªá qua Contact page!"
  }

  generateSmartDefault(message) {
    // Ph√¢n t√≠ch context v√† ƒë∆∞a ra c√¢u tr·∫£ l·ªùi th√¥ng minh
    const responses = [
      "ƒê√≥ l√† c√¢u h·ªèi hay! D·ª±a v√†o portfolio c·ªßa Thuy, t√¥i nghƒ© b·∫°n c√≥ th·ªÉ quan t√¢m ƒë·∫øn projects, technical skills, ho·∫∑c work experience c·ªßa c√¥ ·∫•y. B·∫°n mu·ªën t√¨m hi·ªÉu aspect n√†o c·ª• th·ªÉ?",
      "Interesting question! Thuy's portfolio c√≥ r·∫•t nhi·ªÅu information. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ her projects (e-commerce, task management), skills (React, Node.js, testing), ho·∫∑c how to contact her for opportunities!",
      "T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt th√™m v·ªÅ Thuy! C√¥ ·∫•y l√† m·ªôt developer r·∫•t talented v·ªõi experience trong c·∫£ development v√† QA. H√£y h·ªèi t√¥i v·ªÅ specific topics nh∆∞ projects, skills, ho·∫∑c career journey!"
    ]
    
    return responses[Math.floor(Math.random() * responses.length)]
  }

  // Main method ƒë·ªÉ get AI response
  async getAIResponse(userMessage) {
    try {
      // Th·ª≠ Gemini AI tr∆∞·ªõc (mi·ªÖn ph√≠)
      if (GEMINI_API_KEY && GEMINI_API_KEY !== 'YOUR_GEMINI_API_KEY') {
        const response = await this.getGeminiResponse(userMessage)
        this.addToHistory(userMessage, response)
        return response
      }
      
      // Fallback to OpenAI n·∫øu c√≥ API key
      if (OPENAI_API_KEY && OPENAI_API_KEY !== 'YOUR_OPENAI_API_KEY') {
        const response = await this.getOpenAIResponse(userMessage)
        this.addToHistory(userMessage, response)
        return response
      }
      
      // Fallback to local AI simulation
      const response = this.getLocalAIResponse(userMessage)
      this.addToHistory(userMessage, response)
      return response
      
    } catch (error) {
      console.error('AI Service Error:', error)
      // Fallback to local response if API fails
      const response = this.getLocalAIResponse(userMessage)
      this.addToHistory(userMessage, response)
      return response
    }
  }

  addToHistory(userMessage, assistantResponse) {
    this.conversationHistory.push(
      { role: 'user', content: userMessage },
      { role: 'assistant', content: assistantResponse }
    )
    
    // Gi·ªØ l·∫°i t·ªëi ƒëa 10 messages g·∫ßn nh·∫•t ƒë·ªÉ avoid API limits
    if (this.conversationHistory.length > 20) {
      this.conversationHistory = this.conversationHistory.slice(-20)
    }
  }

  clearHistory() {
    this.conversationHistory = []
  }
}

export const aiService = new AIService()
