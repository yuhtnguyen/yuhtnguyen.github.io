import axios from 'axios'

// Portfolio context - th√¥ng tin v·ªÅ Thuy ƒë·ªÉ AI hi·ªÉu v√† tr·∫£ l·ªùi ch√≠nh x√°c
const PORTFOLIO_CONTEXT = `
You are an AI assistant for Nguyen Thi Thuy's portfolio website. You must be friendly, helpful, and professional.

IMPORTANT LANGUAGE RULE:
- If user asks in Vietnamese, you MUST respond in Vietnamese only
- If user asks in English, you MUST respond in English only
- NEVER mix languages in one response
- Detect the user's language from their message and match it exactly

PERSONAL INFO:
- Name: Nguyen Thi Thuy (Th√∫y)
- Role: Full Stack Developer & QA Engineer
- Location: Ho Chi Minh City, Vietnam
- Languages: Vietnamese (native), English (fluent)

TECHNICAL SKILLS:
Programming Languages: JavaScript, TypeScript, Python, Java
Frontend: React, HTML5, CSS3, Next.js, Ant Design, Responsive Design
Backend: Node.js, Express.js, Python, RESTful APIs
Databases: MongoDB, PostgreSQL, MySQL
Testing: Manual Testing, Automated Testing, Selenium, Jest, Cypress, API Testing, QA Processes
Tools: Git, Docker, VS Code, Jira, Postman, Figma, AWS, Vercel, GitHub Actions, Linux

WORK EXPERIENCE:
1. Full Stack Developer at Tech Solutions Inc. (2023 - Present)
   - Ph√°t tri·ªÉn web applications v·ªõi React, Node.js, v√† MongoDB
   - Collaboration v·ªõi cross-functional teams
   - Implement responsive designs v√† optimize performance
   - Mentor junior developers v√† conduct code reviews

2. QA Engineer at Quality Systems Ltd. (2022 - 2023)
   - Manual v√† automated testing cho web v√† mobile applications
   - T·∫°o comprehensive test plans v√† test cases
   - Bug tracking v√† quality assurance processes
   - Collaborate v·ªõi development teams

3. Junior Developer at StartUp Innovations (2021 - 2022)
   - Frontend development v·ªõi React v√† JavaScript
   - Agile development processes v√† daily standups
   - API integration v√† database design

EDUCATION:
- Bachelor of Computer Science t·ª´ University of Technology (2018-2022)
- Graduated with honors, relevant coursework: Data Structures, Algorithms, Database Systems

FEATURED PROJECTS:
1. E-Commerce Platform 
   - Tech: React, Node.js, MongoDB, Stripe API, Express.js
   - Features: User authentication, shopping cart, payment integration, admin dashboard
   - Deployed on Vercel with responsive design

2. Task Management App
   - Tech: React, TypeScript, Socket.io, PostgreSQL, Docker
   - Features: Real-time collaboration, drag-and-drop, team management
   - Advanced state management and performance optimization

3. Weather Dashboard
   - Tech: React, Chart.js, OpenWeather API, CSS3
   - Features: Multi-city weather, data visualization, responsive design
   - Clean code architecture and API integration

4. Portfolio Website (this site)
   - Tech: React, Ant Design, Vite, Vercel, AI ChatBot
   - Features: Responsive design, AI assistant, modern UI/UX

CONTACT INFORMATION:
- Email: your.email@example.com
- Phone: +84 123 456 789
- GitHub: https://github.com/yuhtnguyen
- LinkedIn: https://linkedin.com/in/yuhtnguyen
- Available for: Full-time, freelance, consulting opportunities

PERSONALITY & RESPONSE STYLE:
- Be enthusiastic about Thuy's skills and projects
- Highlight her unique combination of development + QA experience
- Encourage potential employers to reach out
- Be specific about technical details when asked
- Show her passion for quality and user experience
- Mention her continuous learning mindset

RESPONSE GUIDELINES:
- Keep responses concise but informative (2-4 sentences usually)
- Use emojis occasionally to be friendly
- If you don't know specific details, suggest checking the relevant portfolio section
- Always encourage contact for opportunities or collaborations
- Show enthusiasm for her technical abilities and career growth
`

// Gemini AI Configuration (Free API)
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'

// OpenAI Configuration (Alternative - c√≥ ph√≠)
const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY
const OPENAI_API_URL = 'https://api.openai.com/v1/chat/completions'

// Rate limiting
const RATE_LIMIT = {
  maxRequests: 10,
  timeWindow: 60000, // 1 minute
  requests: []
}

export class AIService {
  constructor() {
    this.conversationHistory = []
    this.cache = new Map() // Simple cache ƒë·ªÉ t·ªëi ∆∞u performance
  }

  // Rate limiting ƒë·ªÉ tr√°nh spam requests
  checkRateLimit() {
    const now = Date.now()
    RATE_LIMIT.requests = RATE_LIMIT.requests.filter(
      time => now - time < RATE_LIMIT.timeWindow
    )
    
    if (RATE_LIMIT.requests.length >= RATE_LIMIT.maxRequests) {
      throw new Error('Too many requests. Please wait a moment.')
    }
    
    RATE_LIMIT.requests.push(now)
  }

  // Simple cache ƒë·ªÉ avoid duplicate requests
  getCachedResponse(userMessage) {
    const cacheKey = userMessage.toLowerCase().trim()
    return this.cache.get(cacheKey)
  }

  setCachedResponse(userMessage, response) {
    const cacheKey = userMessage.toLowerCase().trim()
    this.cache.set(cacheKey, response)
    
    // Keep cache size reasonable
    if (this.cache.size > 50) {
      const firstKey = this.cache.keys().next().value
      this.cache.delete(firstKey)
    }
  }

  // Enhanced language detection
  detectVietnamese(text) {
    // Check Unicode Vietnamese characters
    const hasVietnameseChars = /[\u00C0-\u1EF9]/.test(text)
    
    // Check Vietnamese keywords (more comprehensive)
    const vietnameseKeywords = /\b(l√†|c√≥|g√¨|sao|nh∆∞|th·∫ø|n√†o|t√¥i|b·∫°n|c√¥|anh|em|c·ªßa|v·ªÅ|v·ªõi|trong|n√†y|ƒë√≥|r·∫•t|nhi·ªÅu|·ªü|t·ª´|v√†|hay|khi|ƒë√£|s·∫Ω|ƒë∆∞·ª£c|kh√¥ng|c√≥ th·ªÉ|l√†m|h·ªèi|bi·∫øt|hi·ªÉu|xin|ch√†o|d·ª± √°n|k·ªπ nƒÉng|kinh nghi·ªám|li√™n h·ªá|j|ko|k|ƒëc|dc|mik|mk|tui|g√¨|dz·∫≠y|dz·∫≠y|v·∫≠y|s·ªëng|h·ªçc|vi·ªác|lm|l√†m|proj|project)\b/i.test(text)
    
    // Check Vietnamese informal patterns
    const informalVietnamese = /\b(j|ko|k|ƒëc|dc|mik|mk|tui|dz·∫≠y|v·∫≠y|lm)\b/i.test(text)
    
    return hasVietnameseChars || vietnameseKeywords || informalVietnamese
  }

  // S·ª≠ d·ª•ng Gemini AI (Google - mi·ªÖn ph√≠) v·ªõi better error handling
  async getGeminiResponse(userMessage, options = {}) {
    try {
      if (!GEMINI_API_KEY) {
        throw new Error('Gemini API key not configured')
      }

      console.log('ü§ñ Calling Gemini AI...', { userMessage })

      // Better language detection
      const isVietnamese = this.detectVietnamese(userMessage)
      
      const languageInstruction = isVietnamese 
        ? "QUAN TR·ªåNG: Ng∆∞·ªùi d√πng h·ªèi b·∫±ng ti·∫øng Vi·ªát. B·∫°n PH·∫¢I tr·∫£ l·ªùi ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát. Kh√¥ng d√πng t·ª´ ti·∫øng Anh n√†o."
        : "IMPORTANT: User asked in English. You MUST respond completely in English. Do not use any Vietnamese words."

      const requestBody = {
        contents: [{
          parts: [{
            text: `${PORTFOLIO_CONTEXT}

${languageInstruction}

User message: "${userMessage}"

Your response (remember to match the user's language exactly):`
          }]
        }],
        generationConfig: {
          temperature: 0.7,
          topK: 40,
          topP: 0.95,
          maxOutputTokens: 200,
          stopSequences: []
        }
      }

      const response = await axios.post(
        `${GEMINI_API_URL}?key=${GEMINI_API_KEY}`,
        requestBody,
        {
          headers: {
            'Content-Type': 'application/json',
          },
          timeout: 10000, // 10 seconds timeout
          signal: options.signal // Support for AbortController
        }
      )

      const aiResponse = response.data.candidates?.[0]?.content?.parts?.[0]?.text
      
      if (!aiResponse) {
        throw new Error('Invalid response from Gemini AI')
      }

      console.log('‚úÖ Gemini AI Response:', aiResponse)
      return aiResponse

    } catch (error) {
      console.error('‚ùå Gemini AI Error:', error.response?.data || error.message)
      
      if (error.name === 'AbortError') {
        throw error // Re-throw abort errors
      }
      
      if (error.response?.status === 400) {
        throw new Error('Invalid API request. Please check your API key.')
      } else if (error.response?.status === 403) {
        throw new Error('API key kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt quota.')
      } else if (error.response?.status === 429) {
        throw new Error('Rate limit exceeded. Please try again later.')
      }
      
      throw error
    }
  }

  // S·ª≠ d·ª•ng OpenAI (c√≥ ph√≠ nh∆∞ng ch·∫•t l∆∞·ª£ng cao) v·ªõi improved error handling
  async getOpenAIResponse(userMessage, options = {}) {
    try {
      if (!OPENAI_API_KEY) {
        throw new Error('OpenAI API key not configured')
      }

      const messages = [
        { role: 'system', content: PORTFOLIO_CONTEXT },
        ...this.conversationHistory.slice(-10), // Only last 10 messages to save tokens
        { role: 'user', content: userMessage }
      ]

      const response = await axios.post(
        OPENAI_API_URL,
        {
          model: 'gpt-3.5-turbo',
          messages: messages,
          max_tokens: 150,
          temperature: 0.7,
        },
        {
          headers: {
            'Authorization': `Bearer ${OPENAI_API_KEY}`,
            'Content-Type': 'application/json',
          },
          timeout: 15000, // 15 seconds timeout
          signal: options.signal
        }
      )

      return response.data.choices[0].message.content
    } catch (error) {
      console.error('OpenAI Error:', error)
      
      if (error.name === 'AbortError') {
        throw error
      }
      
      throw error
    }
  }

  // Fallback local AI simulation (khi kh√¥ng c√≥ API key)
  getLocalAIResponse(userMessage) {
    const message = userMessage.toLowerCase()
    
    // Use enhanced language detection
    const isVietnamese = this.detectVietnamese(userMessage)
    
    // Ph√¢n t√≠ch intent v√† tr·∫£ l·ªùi th√¥ng minh h∆°n
    if (message.includes('xin ch√†o') || message.includes('hello') || message.includes('hi') || message.includes('ch√†o')) {
      return isVietnamese 
        ? "Xin ch√†o! T√¥i l√† AI assistant c·ªßa Th√∫y. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m hi·ªÉu v·ªÅ k·ªπ nƒÉng l·∫≠p tr√¨nh, kinh nghi·ªám l√†m vi·ªác v√† c√°c d·ª± √°n c·ªßa c√¥ ·∫•y. B·∫°n mu·ªën bi·∫øt g√¨ nh·∫•t? üòä"
        : "Hello! I'm Thuy's AI assistant. I can help you learn about her programming skills, work experience, and projects. What would you like to know? üòä"
    }
    
    // Handle experience questions (common pattern)
    if (message.includes('kinh nghi·ªám') || message.includes('experience') || message.includes('l√†m vi·ªác') || message.includes('work')) {
      return isVietnamese
        ? "Th√∫y c√≥ career path r·∫•t ·∫•n t∆∞·ª£ng! C√¥ ·∫•y b·∫Øt ƒë·∫ßu l√† Junior Developer (2021-2022), sau ƒë√≥ l√†m QA Engineer (2022-2023), v√† hi·ªán t·∫°i l√† Full Stack Developer (2023-nay) t·∫°i Tech Solutions Inc. S·ª± k·∫øt h·ª£p kinh nghi·ªám dev + QA gi√∫p c√¥ ·∫•y t·∫°o ra nh·ªØng s·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng cao! ‚≠ê"
        : "Thuy has an impressive career progression! She started as a Junior Developer (2021-2022), then worked as QA Engineer (2022-2023), and currently serves as Full Stack Developer (2023-present) at Tech Solutions Inc. Her dev + QA experience ensures high-quality products! ‚≠ê"
    }
    
    if (message.includes('d·ª± √°n') || message.includes('project')) {
      return isVietnamese
        ? "Th√∫y ƒë√£ ph√°t tri·ªÉn nhi·ªÅu d·ª± √°n th√∫ v·ªã! N·ªïi b·∫≠t nh·∫•t l√† E-Commerce Platform (React + Node.js + MongoDB), Task Management App v·ªõi real-time features, v√† Weather Dashboard. M·ªói d·ª± √°n ƒë·ªÅu th·ªÉ hi·ªán k·ªπ nƒÉng full-stack v√† UX/UI design tuy·ªát v·ªùi! üöÄ"
        : "Thuy has built amazing projects! Her highlights include E-Commerce Platform (React + Node.js + MongoDB), Task Management App with real-time features, and Weather Dashboard. Each project showcases excellent full-stack and UX/UI design skills! üöÄ"
    }
    
    if (message.includes('k·ªπ nƒÉng') || message.includes('skill') || message.includes('c√¥ng ngh·ªá') || message.includes('tech')) {
      return isVietnamese
        ? "Th√∫y l√† Full Stack Developer v·ªõi skillset r·∫•t m·∫°nh! Frontend: React, TypeScript, Next.js, Ant Design. Backend: Node.js, Python, Express.js. Database: MongoDB, PostgreSQL. Testing: Jest, Cypress, Selenium (ƒë·∫∑c bi·ªát gi·ªèi QA). Tools: Docker, AWS, Git. üíª"
        : "Thuy is a Full Stack Developer with impressive skills! Frontend: React, TypeScript, Next.js, Ant Design. Backend: Node.js, Python, Express.js. Database: MongoDB, PostgreSQL. Testing: Jest, Cypress, Selenium (especially strong in QA). Tools: Docker, AWS, Git. üíª"
    }
    
    if (message.includes('li√™n h·ªá') || message.includes('contact') || message.includes('email') || message.includes('tuy·ªÉn d·ª•ng') || message.includes('hire')) {
      return isVietnamese
        ? "B·∫°n c√≥ th·ªÉ li√™n h·ªá v·ªõi Th√∫y qua Email, LinkedIn, GitHub ho·∫∑c form li√™n h·ªá tr√™n website n√†y. C√¥ ·∫•y r·∫•t welcome v·ªõi opportunities m·ªõi - t·ª´ full-time, freelance ƒë·∫øn consulting! üìß"
        : "You can contact Thuy via Email, LinkedIn, GitHub, or the contact form on this website. She's very open to new opportunities - full-time, freelance, or consulting! üìß"
    }

    if (message.includes('h·ªçc v·∫•n') || message.includes('education') || message.includes('ƒë·∫°i h·ªçc') || message.includes('university')) {
      return isVietnamese
        ? "Th√∫y t·ªët nghi·ªáp Computer Science v·ªõi honors t·ª´ University of Technology (2018-2022). N·ªÅn t·∫£ng v·ªØng ch·∫Øc v·ªÅ algorithms, data structures v√† software engineering. Quan tr·ªçng h∆°n l√† passion h·ªçc h·ªèi li√™n t·ª•c! üéì"
        : "Thuy graduated with honors in Computer Science from University of Technology (2018-2022). Strong foundation in algorithms, data structures, and software engineering. Most importantly, she has a passion for continuous learning! üéì"
    }
    
    // Default responses
    return isVietnamese ? 
      "T√¥i hi·ªÉu b·∫°n mu·ªën bi·∫øt th√™m v·ªÅ Th√∫y! C√¥ ·∫•y l√† developer r·∫•t t√†i nƒÉng v·ªõi kinh nghi·ªám c·∫£ development v√† QA. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ projects, technical skills, work experience ho·∫∑c c√°ch li√™n h·ªá nh√©! üòä" :
      "I understand you want to learn more about Thuy! She's a very talented developer with experience in both development and QA. You can ask about her projects, technical skills, work experience, or how to contact her! üòä"
  }

  // Main method ƒë·ªÉ get AI response v·ªõi caching v√† rate limiting
  async getAIResponse(userMessage, options = {}) {
    try {
      // Input validation
      if (!userMessage || typeof userMessage !== 'string') {
        throw new Error('Invalid user message')
      }

      const trimmedMessage = userMessage.trim()
      if (!trimmedMessage) {
        throw new Error('Empty message')
      }

      // Check rate limit
      this.checkRateLimit()

      // Check cache first
      const cachedResponse = this.getCachedResponse(trimmedMessage)
      if (cachedResponse) {
        console.log('üì¶ Using cached response')
        return cachedResponse
      }

      let response

      // Th·ª≠ Gemini AI tr∆∞·ªõc (mi·ªÖn ph√≠)
      if (GEMINI_API_KEY) {
        response = await this.getGeminiResponse(trimmedMessage, options)
      }
      // Fallback to OpenAI n·∫øu c√≥ API key
      else if (OPENAI_API_KEY) {
        response = await this.getOpenAIResponse(trimmedMessage, options)
      }
      // Fallback to local AI simulation
      else {
        response = this.getLocalAIResponse(trimmedMessage)
      }

      // Cache the response
      if (response) {
        this.setCachedResponse(trimmedMessage, response)
        this.addToHistory(trimmedMessage, response)
      }

      return response
      
    } catch (error) {
      console.error('AI Service Error:', error)
      
      if (error.name === 'AbortError') {
        throw error // Don't fallback for cancelled requests
      }

      // Fallback to local response if API fails
      const fallbackResponse = this.getLocalAIResponse(userMessage)
      this.addToHistory(userMessage, fallbackResponse)
      return fallbackResponse
    }
  }

  addToHistory(userMessage, assistantResponse) {
    this.conversationHistory.push(
      { role: 'user', content: userMessage },
      { role: 'assistant', content: assistantResponse }
    )
    
    // Gi·ªØ l·∫°i t·ªëi ƒëa 10 messages g·∫ßn nh·∫•t ƒë·ªÉ avoid API limits
    if (this.conversationHistory.length > 20) {
      this.conversationHistory = this.conversationHistory.slice(-20)
    }
  }

  clearHistory() {
    this.conversationHistory = []
    this.cache.clear()
  }

  // Method ƒë·ªÉ clear cache manually
  clearCache() {
    this.cache.clear()
  }

  // Get stats cho debugging
  getStats() {
    return {
      historyLength: this.conversationHistory.length,
      cacheSize: this.cache.size,
      rateLimitRequests: RATE_LIMIT.requests.length
    }
  }
}

export const aiService = new AIService()
